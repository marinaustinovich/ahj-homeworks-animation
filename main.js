(()=>{"use strict";class t{constructor(t){if(!(t instanceof HTMLElement))throw new Error("container is not HTMLElement");this.container=t}init(){this.drawUi(),this.events()}drawUi(){this.container.innerHTML='\n      <div class="like-wrapper">\n        <button type="button" class="add-like">Like</button>\n      </div>  \n        '}events(){this.container.querySelector(".add-like").addEventListener("click",(()=>this.addLike()))}addLike(){const e=document.createElement("div");e.classList.add("like");const n=t.getRandomTrajectory();e.style.animation=`${n} 500ms ease-out`,this.container.querySelector(".like-wrapper").appendChild(e),e.addEventListener("animationend",(()=>e.parentNode.removeChild(e)))}static getRandomTrajectory(){const t=["like1","like2","like3","like4"];return t[Math.floor(Math.random()*t.length)]}}const e=new class{constructor(t){if(!(t instanceof HTMLElement))throw new Error("container is not HTMLElement");this.container=t,this.errorContainer=null,this.modal=null,this.textEl=null,this.submitButton=null,this.openButton=null,this.closeButton=null}init(){this.drawUi(),this.addEvents()}drawUi(){this.container.innerHTML='\n      <div id="modal" class="modal">\n        <div class="modal-wrapper">\n          <div class="modal-content">\n              <h2>Напишите нам</h2>\n              <textarea id="text" class="text-modal" placeholder="Writen your text here"></textarea>\n              <button type="submit" id="submit" class="btn-modal">Отправить</button>\n              <button type="button" class="close-modal">&times;</button>\n          </div>\n          <button type="button" id="open-modal" class="open-modal">Написать</button>\n        </div>\n        <div class="error-container"></div>\n      </div>\n    '}addEvents(){this.modal=this.container.querySelector("#modal"),this.textEl=this.container.querySelector("#text"),this.submitButton=this.container.querySelector("#submit"),this.openButton=this.container.querySelector("#open-modal"),this.closeButton=this.container.querySelector(".close-modal"),this.errorContainer=this.container.querySelector(".error-container"),this.submitButton.addEventListener("click",(()=>this.onSubmit())),this.openButton.addEventListener("click",(()=>this.showModal())),this.textEl.addEventListener("click",(()=>this.clearTextField())),this.closeButton.addEventListener("click",(()=>this.hideModal()))}onSubmit(){this.textEl.value?this.modal.style.display="none":this.showError("Пожалуйста, введите ваш текст")}showModal(){this.modal.querySelector(".modal-content").classList.add("modal-content_visible"),this.openButton.classList.add("open-modal_click")}hideModal(){this.modal.querySelector(".modal-content").classList.remove("modal-content_visible"),this.openButton.classList.remove("open-modal_click")}clearTextField(){this.textEl.value="",this.hideError()}showError(t){this.errorContainer.textContent=t,this.errorContainer.style.display="block"}hideError(){this.errorContainer.style.display="none"}}(document.getElementById("chat-container")),n=new class{constructor(t){if(!(t instanceof HTMLElement))throw new Error("container is not HTMLElement");this.container=t}init(){this.drawUi(),this.addEvents()}drawUi(){this.container.innerHTML='\n      <div class="collapse-wrapper">\n        <button type="button" class="show-collapse">Collapse</button>\n        <div class="content-collapse">Collapsible containers are interactive UI components that allow users to expand and collapse sections of content. This helps to keep the webpage organized and clutter-free, making it easier for users to find and focus on the information they\'re looking for.</div>\n      </div>\n      <span class="copy-collapse">Copy</span>\n      '}addEvents(){this.container.querySelector(".show-collapse").addEventListener("click",(()=>this.container.querySelector(".content-collapse").classList.toggle("content-collapse_visible")))}}(document.getElementById("collapse-container")),i=new t(document.getElementById("liker-container"));e.init(),n.init(),i.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,